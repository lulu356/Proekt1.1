Все члены класса - поля, методы, свойства - все они имеют модификаторы доступа. Модификаторы доступа позволяют задать допустимую область видимости для членов класса. То есть модификаторы доступа определяют контекст, в котором можно употреблять данную переменную или метод. В предыдущих темах мы уже с ним сталкивались, когда объявляли поля класса публичными (то есть с модификатором public).

В C# применяются следующие модификаторы доступа:

public: публичный, общедоступный класс или член класса. Такой член класса доступен из любого места в коде, а также из других программ и сборок.

private: закрытый класс или член класса. Представляет полную противоположность модификатору public. Такой закрытый класс или член класса доступен только из кода в том же классе или контексте.

protected: такой член класса доступен из любого места в текущем классе или в производных классах. При этом производные классы могут располагаться в других сборках.

internal: класс и члены класса с подобным модификатором доступны из любого места кода в той же сборке, однако он недоступен для других программ и сборок (как в случае с модификатором public).

protected internal: совмещает функционал двух модификаторов. Классы и члены класса с таким модификатором доступны из текущей сборки и из производных классов.

private protected: такой член класса доступен из любого места в текущем классе или в производных классах, которые определены в той же сборке.

Мы можем явно задать модификатор доступа, например:

1
2
3
4
5
6
7
8
private protected class State
{
    internal int a;
    protected void Print() 
    { 
        Console.WriteLine($"a = {a}"); 
    }
}
Либо можем не указывать:

1
2
3
4
5
6
7
8
class State
{
    int a;
    void Print() 
    { 
        Console.WriteLine($"a = {a}"); 
    }
}
Если для полей и методов не определен модификатор доступа, то по умолчанию для них применяется модификатор private.

Классы и структуры, объявленные без модификатора, по умолчанию имеют доступ internal.

Все классы и структуры, определенные напрямую в пространствах имен и не являющиеся вложенными в другие классы, могут иметь только модификаторы public или internal.

Посмотрим на примере и создадим следующий класс State:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
public class State
{
    // все равно, что private int defaultVar;
    int defaultVar;
    // поле доступно только из текущего класса
    private int privateVar;
    // доступно из текущего класса и производных классов, которые определены в этом же проекте
    protected private int protectedPrivateVar;
    // доступно из текущего класса и производных классов
    protected int protectedVar;
    // доступно в любом месте текущего проекта
    internal int internalVar;
    // доступно в любом месте текущего проекта и из классов-наследников в других проектах
    protected internal int protectedInternalVar;
    // доступно в любом месте программы, а также для других программ и сборок
    public int publicVar;
 
    // по умолчанию имеет модификатор private
    void defaultMethod() => Console.WriteLine($"defaultVar = {defaultVar}");
 
    // метод доступен только из текущего класса
    private void privateMethod() => Console.WriteLine($"privateVar = {privateVar}");
 
    // доступен из текущего класса и производных классов, которые определены в этом же проекте
    protected private void protectedPrivateMethod() => Console.WriteLine($"protectedPrivateVar = {protectedPrivateVar}");
 
    // доступен из текущего класса и производных классов
    protected void protectedMethod()=> Console.WriteLine($"protectedVar = {protectedVar}");
     
    // доступен в любом месте текущего проекта
    internal void internalMethod() => Console.WriteLine($"internalVar = {internalVar}");
     
    // доступен в любом месте текущего проекта и из классов-наследников в других проектах
    protected internal void protectedInternalMethod() => Console.WriteLine($"protectedInternalVar = {protectedInternalVar}");
     
    // доступен в любом месте программы, а также для других программ и сборок
    public void publicMethod() => Console.WriteLine($"publicVar = {publicVar}");
    }
Так как класс State объявлен с модификатором public, он будет доступен из любого места программы, а также из других программ и сборок. Класс State имеет пять полей для каждого уровня доступа. Плюс одна переменная без модификатора, которая является закрытой (private) по умолчанию.

Также имеются шесть методов, которые будут выводить значения полей класса на экран. Обратите внимание, что так как все модификаторы позволяют использовать члены класса внутри данного класса, то и все переменные класса, в том числе закрытые, у нас доступны всем его методам, так как все находятся в контексте класса State.

Теперь посмотрим, как мы сможем использовать переменные нашего класса в программе (то есть в методе Main класса Program), если классы State и Program находятся в одном проекте:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
class Program
{
    static void Main(string[] args)
    {
        State state1 = new State();
 
        // присвоить значение переменной defaultVar у нас не получится,
        // так как она имеет модификатор private и класс Program ее не видит
        // И данную строку среда подчеркнет как неправильную
        state1.defaultVar = 5; //Ошибка, получить доступ нельзя
 
        // то же самое относится и к переменной privateVar
        state1.privateVar = 5; // Ошибка, получить доступ нельзя
 
        // присвоить значение переменной protectedPrivateVar не получится,
        // так как класс Program не является классом-наследником класса State
        state1.protectedPrivateVar =5; // Ошибка, получить доступ нельзя
 
        // присвоить значение переменной protectedVar тоже не получится,
        // так как класс Program не является классом-наследником класса State
        state1.protectedVar = 5; // Ошибка, получить доступ нельзя
 
        // переменная internalVar с модификатором internal доступна из любого места текущего проекта
        // поэтому спокойно присваиваем ей значение
        state1.internalVar = 5;
 
        // переменная protectedInternalVar так же доступна из любого места текущего проекта
        state1.protectedInternalVar = 5;
 
        // переменная publicVar общедоступна
        state1.publicVar = 5;
    }
}
Таким образом, мы смогли установить только переменные internalVar, protectedInternalVar и publicVar, так как их модификаторы позволяют использовать в данном контексте.

Аналогично дело обстоит и с методами:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
class Program
{
    static void Main(string[] args)
    {
        State state1 = new State();
 
        state1.defaultMethod(); //Ошибка, получить доступ нельзя
 
        state1.privateMethod(); // Ошибка, получить доступ нельзя
 
        state1.protectedPrivateMethod(); // Ошибка, получить доступ нельзя
 
        state1.protectedMethod(); // Ошибка, получить доступ нельзя
 
        state1.internalMethod();    // норм
 
        state1.protectedInternalMethod();  // норм
 
        state1.publicMethod();      // норм
    }
}
Здесь нам оказались доступны только три метода: internalMethod, protectedInternalMethod, publicMethod, которые имееют соответственно модификаторы internal, protected internal, public.

Благодаря такой системе модификаторов доступа можно скрывать некоторые моменты реализации класса от других частей программы.

Несмотря на то, что модификаторы public и internal похожи по своему действию, но они имеют большое отличие. Классы и члены класса с модификатором public также будут доступны и другим программам, если данных класс поместить в динамическую библиотеку dll и потом ее использовать в этих программах.